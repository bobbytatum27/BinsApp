type Facility @model {
  id: ID!
  name: String
  address: String
  boxes: [Box] @connection(keyName: "itemsByFacility", fields: ["id"])
  customers: [Tenant] @connection(keyName: "tenantsByFacility", fields: ["id"])
  orders: [Order] @connection(keyName: "ordersbyFacility", fields: ["id"])
  units: [Unit] @connection(keyName: "unitsByFacility", fields: ["id"])
}

type Unit @model
  @key(name: "unitsByFacility", fields: ["facilityID"]) {
  id: ID!
  facilityID: ID!
  size: String
  usage: String
  boxes: [Box] @connection(keyName: "itemsByUnit", fields: ["id"])
}

type Tenant @model
  @auth(rules: [{ allow: owner }, {allow: groups}])
  @key(name: "tenantByEmail", fields: ["email"], queryField: "tenantByEmail")
  @key(name: "tenantsByFacility", fields: ["facilityID"]) {
  id: ID!
  facilityID: ID
  name: String
  email: String!
  phone: String
  unit: Unit @connection
  address: [Address]
  licenseNumber: String
  licenseState: String
  orders: [Order] @connection(keyName: "ordersByTenant", fields: ["id"])
  boxes: [Box] @connection(keyName: "boxesByTenant", fields: ["id"])
}

type Box @model 
  @key(name: "boxesByTenant", fields: ["tenantID"], queryField: "boxesByTenant")
  @key(name: "itemsByFacility", fields: ["facilityID"], queryField: "itemsByFacility")
  @key(name: "itemsByUnit", fields: ["unitID"], queryField: "itemsByUnit") {
  id: ID!
  tenantID: ID!
  facilityID: ID!
  unitID: ID
  description: String
  status: BoxStatus
  photo: String # map to the s3 url
  location: String
}

type Order @model
  @key(name: "ordersByTenant", fields: ["tenantID"])
  @key(name: "ordersbyFacility", fields: ["facilityID"], queryField: "ordersbyFacility"){  
  id: ID!
  tenantID: ID!
  facilityID: ID!
  date: String
  time: String
  address: String
  jobType: JobType
  status: Status
}

type Address {
 id: ID!
 tenantID: ID
 streetAddress: String
 building: String
 city: String
 state: String
 zip: Int
 parking: String
}

enum BoxStatus {
  IN_STORAGE
  RETURNED
  TO_PICKUP
  TO_DELIVER
}

enum JobType {
  PICKUP
  DELIVERY
}

enum Status {
  COMPLETED
  INCOMPLETE
}