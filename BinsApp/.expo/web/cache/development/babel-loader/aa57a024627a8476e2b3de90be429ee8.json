{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\azhan\\\\desktop\\\\binsapp\\\\binsapp\\\\components\\\\LoginProvider.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { createContext, useState } from 'react';\nimport { Auth } from 'aws-amplify';\nexport var LoginContext = createContext();\nexport var LoginProvider = function (_React$Component) {\n  _inherits(LoginProvider, _React$Component);\n\n  var _super = _createSuper(LoginProvider);\n\n  function LoginProvider(props) {\n    var _this;\n\n    _classCallCheck(this, LoginProvider);\n\n    _this = _super.call(this, props);\n\n    _this.login = function (email, password) {\n      return new Promise(function (resolve, reject) {\n        Auth.signIn({\n          username: email,\n          password: password\n        }).then(function () {\n          _this.setState({\n            isLoggedIn: true\n          });\n\n          resolve('Successful Sign In');\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    };\n\n    _this.logout = function () {\n      return new Promise(function (resolve, reject) {\n        console.log('login state before signout: ' + _this.state.isLoggedIn);\n        Auth.signOut().then(function () {\n          _this.setState({\n            isLoggedIn: false\n          });\n\n          console.log('login state after logout: ' + _this.state.isLoggedIn);\n          resolve('successful sign out');\n        }).catch(function (err) {\n          return reject('error signing out!');\n        });\n      });\n    };\n\n    _this.signup = function (email, password, name, phone_num, address, specialInstructions, size) {\n      return new Promise(function (resolve, reject) {\n        console.log('signing up!');\n        Auth.signUp({\n          username: email,\n          password: password,\n          attributes: {\n            name: name,\n            phone_number: phone_num,\n            address: address,\n            'custom:specialInstructions': specialInstructions,\n            'custom:size': size\n          }\n        }).then(function () {\n          resolve('Successful Sign Up');\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    };\n\n    _this.contactConfirmation = function (email, code) {\n      return new Promise(function (resolve, reject) {\n        Auth.confirmSignUp(email, code).then(function () {\n          return resolve('Code Confirmed');\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    };\n\n    _this.completeSignup = function () {\n      return new Promise(function (resolve, reject) {\n        _this.setState({\n          isLoggedIn: true\n        });\n\n        resolve('successful sign up completed.');\n      });\n    };\n\n    _this.resetPassword = function (email) {\n      return new Promise(function (resolve, reject) {\n        console.log('Initiating Password Reset...');\n        Auth.forgotPassword(email).then(function () {\n          return resolve('code sent');\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    };\n\n    _this.confirmResetPassword = function (email, code, password) {\n      return new Promise(function (resolve, reject) {\n        Auth.forgotPasswordSubmit(email, code, password).then(function () {\n          return resolve('Successfully Reset Password');\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    };\n\n    _this.state = {\n      isLoggedIn: false\n    };\n    return _this;\n  }\n\n  _createClass(LoginProvider, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(LoginContext.Provider, {\n        value: _objectSpread(_objectSpread({}, this.state), {}, {\n          login: this.login,\n          logout: this.logout,\n          signup: this.signup,\n          contactConfirmation: this.contactConfirmation,\n          completeSignup: this.completeSignup,\n          resetPassword: this.resetPassword,\n          confirmResetPassword: this.confirmResetPassword\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }\n      }, this.props.children);\n    }\n  }]);\n\n  return LoginProvider;\n}(React.Component);","map":{"version":3,"sources":["C:/Users/azhan/desktop/binsapp/binsapp/components/LoginProvider.js"],"names":["React","createContext","useState","Auth","LoginContext","LoginProvider","props","login","email","password","Promise","resolve","reject","signIn","username","then","setState","isLoggedIn","catch","err","logout","console","log","state","signOut","signup","name","phone_num","address","specialInstructions","size","signUp","attributes","phone_number","contactConfirmation","code","confirmSignUp","completeSignup","resetPassword","forgotPassword","confirmResetPassword","forgotPasswordSubmit","children","Component"],"mappings":"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","sourcesContent":["import React, {createContext, useState} from 'react';\nimport { Auth } from 'aws-amplify';\n\n// for login/signup context\nexport const LoginContext = createContext();\n\nexport class LoginProvider extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoggedIn: false,\n        };\n    }\n\n    /*\n     * Login Promise\n     * To login a user via AWS Amplify. Also changes isLoggedIn boolean, which\n     * conditionally renders appropriate screens (pending state).\n     *\n     * @param email: string of user email\n     * @param password: string of user password\n     * @return Promise\n     */\n    login = (email, password) => {\n        return new Promise((resolve, reject) => {\n            Auth.signIn({\n                username: email,\n                password: password,\n            })\n            .then(() => {\n                this.setState({isLoggedIn: true});\n                resolve('Successful Sign In');\n            })\n            .catch(err => reject(err));\n        });\n    }\n\n    /*\n     * Logout Promise\n     * To log a user out via AWS Amplify. Also changes isLoggedIn boolean, which forces user back\n     * to Landing page.\n     *\n     * @return Promise\n     */\n    logout = () => {\n        return new Promise((resolve, reject) => {\n            console.log('login state before signout: ' + this.state.isLoggedIn);\n            Auth.signOut()\n            .then(() => {\n                this.setState({isLoggedIn: false});\n                console.log('login state after logout: ' + this.state.isLoggedIn);\n                resolve('successful sign out');\n            })\n            .catch(err => reject('error signing out!'));\n        });\n    }\n\n    /*\n     * Signup Promise\n     * Registers a user via AWS Amplify. Also changes the isLoggedIn boolean to\n     * force the user to the Home Page. TODO arg check in login page? or here? A thought - before new Promise, can check for input validation and return Alert if invalid.\n     * Note that Auth.signUp may force errors so they need to be checked here too.\n     *\n     * @param email: The user's email as a string\n     * @param password: The user's password as a string\n     * @param name: The user's name as a string\n     * @param phone_num: The user's phone num (what type is amplify looking for?)\n     * @param address: The user's address as a string, fields separated by a space\n     * @return Promise (for now only a promise, potentially Error obj in future)\n     */\n    signup = (email, password, name, phone_num, address, specialInstructions, size) => {\n        return new Promise((resolve, reject) => {\n            console.log('signing up!');\n            Auth.signUp({\n                username: email,\n                password: password,\n                attributes: {\n                  name: name,\n                  phone_number: phone_num,\n                  address: address,\n                  'custom:specialInstructions': specialInstructions,\n                  'custom:size': size,\n                },\n            })\n            .then(() => {\n                resolve('Successful Sign Up');\n            })\n            .catch(err => reject(err));\n        });\n    }\n\n    contactConfirmation = (email, code) => {\n        return new Promise((resolve, reject) => {\n            Auth.confirmSignUp(email, code)\n            .then(() => resolve('Code Confirmed'))\n            .catch((err) => reject(err));\n        });\n    }\n\n    completeSignup = () => {\n        return new Promise((resolve, reject) => {\n            this.setState({isLoggedIn: true});\n            resolve('successful sign up completed.');\n        });\n    }\n\n    resetPassword = (email) => {\n        return new Promise((resolve, reject) => {\n            console.log('Initiating Password Reset...');\n            Auth.forgotPassword(email)\n            .then(() => resolve('code sent'))\n            .catch((err) => reject(err));\n        });\n    }\n\n    confirmResetPassword = (email, code, password) => {\n        return new Promise((resolve, reject) => {\n            Auth.forgotPasswordSubmit(email, code, password)\n            .then(() => resolve('Successfully Reset Password'))\n            .catch((err) => reject(err));\n        });\n    }\n\n    render() {\n        return (\n            <LoginContext.Provider value={{...this.state, login: this.login, logout: this.logout, signup: this.signup, contactConfirmation: this.contactConfirmation, completeSignup: this.completeSignup, resetPassword: this.resetPassword, confirmResetPassword: this.confirmResetPassword}}>\n                {this.props.children}\n            </LoginContext.Provider>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}