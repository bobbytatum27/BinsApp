{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\azhan\\\\desktop\\\\binsapp\\\\binsapp\\\\screens\\\\PasswordReset.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport FormInputHandler from \"../components/FormInputHandler.js\";\nimport LongButton from \"../components/LongButton.js\";\nimport { LoginContext } from \"../components/LoginProvider.js\";\nimport { Auth } from 'aws-amplify';\n\nvar PasswordReset = function (_React$Component) {\n  _inherits(PasswordReset, _React$Component);\n\n  var _super = _createSuper(PasswordReset);\n\n  function PasswordReset(props) {\n    var _this;\n\n    _classCallCheck(this, PasswordReset);\n\n    _this = _super.call(this, props);\n\n    _this.checkPasswordReentry = function () {\n      if (_this.state.password != _this.state.passwordReentry) {\n        _this.setState({\n          validPasswordReentry: false\n        });\n      } else {\n        _this.setState({\n          validPasswordReentry: true\n        });\n      }\n    };\n\n    _this.checkPasswordInput = function () {\n      var hasNumberRegex = /\\d/;\n\n      if (_this.state.password.length >= 8 && hasNumberRegex.test(_this.state.password)) {\n        _this.setState({\n          validPassword: true,\n          validPasswordUI: true\n        });\n      } else {\n        _this.setState({\n          validPassword: false,\n          validPasswordUI: false\n        });\n      }\n    };\n\n    _this.checkValidInput = function () {\n      if (_this.state.validPassword && _this.state.validPasswordReentry) {\n        _this.setState({\n          validInput: true\n        });\n      } else {\n        _this.setState({\n          validInput: false\n        });\n      }\n    };\n\n    _this.state = {\n      email: '',\n      password: '',\n      passwordReentry: '',\n      code: '',\n      confirmationCodeSent: false,\n      validPassword: false,\n      validPasswordUI: true,\n      validPasswordReentry: true,\n      validInput: false\n    };\n    return _this;\n  }\n\n  _createClass(PasswordReset, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 7\n        }\n      }, this.state.confirmationCodeSent ? React.createElement(React.Fragment, null, React.createElement(Text, {\n        style: styles.descriptionText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }\n      }, \"Confirmation Code\"), React.createElement(FormInputHandler, {\n        defaultText: \"Enter the code sent to your email here.\",\n        defaultTextColor: \"#8B8B8B\",\n        style: styles.userInfoText,\n        onChangeText: function onChangeText(val) {\n          return _this2.setState({\n            code: val\n          });\n        },\n        keyboardType: \"email-address\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }\n      }), React.createElement(Text, {\n        style: _objectSpread(_objectSpread({}, styles.descriptionText), {}, {\n          color: this.state.validPasswordUI ? 'white' : 'red'\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }\n      }, \"New Password \", this.state.validPasswordUI ? '' : ' - Must be 8 characters and contain a number!'), React.createElement(FormInputHandler, {\n        defaultText: \"Enter your new password here.\",\n        defaultTextColor: \"#8B8B8B\",\n        style: styles.userInfoText,\n        onChangeText: function onChangeText(val) {\n          return _this2.setState({\n            password: val,\n            validInput: false\n          });\n        },\n        keyboardType: \"email-address\",\n        onBlur: function onBlur() {\n          _this2.checkPasswordInput();\n\n          _this2.checkPasswordReentry();\n\n          _this2.checkValidInput();\n        },\n        onEndEditing: function onEndEditing() {\n          _this2.checkPasswordInput();\n\n          _this2.checkPasswordReentry();\n\n          _this2.checkValidInput();\n        },\n        secureTextEntry: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }\n      }), React.createElement(Text, {\n        style: _objectSpread(_objectSpread({}, styles.descriptionText), {}, {\n          color: this.state.validPasswordReentry ? 'white' : 'red'\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }\n      }, \"Re-enter new password \", this.state.validPasswordReentry ? '' : ' - Passwords do not match!'), React.createElement(FormInputHandler, {\n        defaultText: \"Re-enter your new password here.\",\n        defaultTextColor: \"#8B8B8B\",\n        style: styles.userInfoText,\n        onChangeText: function onChangeText(val) {\n          return _this2.setState({\n            passwordReentry: val,\n            validInput: false\n          });\n        },\n        keyboardType: \"email-address\",\n        onBlur: function onBlur() {\n          _this2.checkPasswordReentry();\n\n          _this2.checkValidInput();\n        },\n        onEndEditing: function onEndEditing() {\n          _this2.checkPasswordReentry();\n\n          _this2.checkValidInput();\n        },\n        secureTextEntry: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }\n      }), React.createElement(LongButton, {\n        title: \"Confirm New Password\",\n        onPress: function onPress() {\n          if (!_this2.state.validInput) {\n            Alert.alert('Password Inputs are invalid!');\n          } else {\n            console.log('Confirming...');\n\n            _this2.context.confirmResetPassword(_this2.state.email, _this2.state.code, _this2.state.password).then(function () {\n              console.log('successful password reset');\n\n              _this2.props.navigation.pop();\n            }).catch(function (err) {\n              return console.log('error on confirmation step: ', err);\n            });\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }\n      })) : React.createElement(React.Fragment, null, React.createElement(Text, {\n        style: styles.descriptionText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }\n      }, \"Password Recovery\"), React.createElement(FormInputHandler, {\n        defaultText: \"Enter the email attached to your account here.\",\n        defaultTextColor: \"#8B8B8B\",\n        style: styles.userInfoText,\n        onChangeText: function onChangeText(val) {\n          return _this2.setState({\n            email: val\n          });\n        },\n        keyboardType: \"email-address\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }\n      }), React.createElement(LongButton, {\n        title: \"Reset Password\",\n        onPress: function onPress() {\n          _this2.context.resetPassword(_this2.state.email).then(function () {\n            console.log('code sent');\n\n            _this2.setState({\n              confirmationCodeSent: true\n            });\n          }).catch(function (err) {\n            return console.log('error: ', err);\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return PasswordReset;\n}(React.Component);\n\nPasswordReset.contextType = LoginContext;\nexport { PasswordReset as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 25,\n    backgroundColor: '#261136'\n  },\n  userInfoText: {\n    borderColor: '#4826A0',\n    borderWidth: 1,\n    textAlign: 'center',\n    color: 'white',\n    margin: 15,\n    padding: 15\n  },\n  descriptionText: {\n    marginBottom: -10,\n    paddingLeft: 15,\n    color: 'white'\n  }\n});","map":{"version":3,"sources":["C:/Users/azhan/desktop/binsapp/binsapp/screens/PasswordReset.js"],"names":["React","FormInputHandler","LongButton","LoginContext","Auth","PasswordReset","props","checkPasswordReentry","state","password","passwordReentry","setState","validPasswordReentry","checkPasswordInput","hasNumberRegex","length","test","validPassword","validPasswordUI","checkValidInput","validInput","email","code","confirmationCodeSent","styles","container","descriptionText","userInfoText","val","color","Alert","alert","console","log","context","confirmResetPassword","then","navigation","pop","catch","err","resetPassword","Component","contextType","StyleSheet","create","flex","padding","backgroundColor","borderColor","borderWidth","textAlign","margin","marginBottom","paddingLeft"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View, TextInput, Button, Alert } from 'react-native';\nimport FormInputHandler from '../components/FormInputHandler.js'\nimport LongButton from '../components/LongButton.js'\nimport {LoginContext} from '../components/LoginProvider.js'\n\n// for testing, can remove(?) after\nimport {Auth} from 'aws-amplify';\n\nexport default class PasswordReset extends React.Component {\n  static contextType = LoginContext;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: '',\n      password: '',\n      passwordReentry: '',\n      code: '',\n      confirmationCodeSent: false,\n      validPassword: false,\n      validPasswordUI: true,  // need to separate this out so initial display is not red/invalid\n      validPasswordReentry: true,\n      validInput: false,\n    };\n  }\n\n  checkPasswordReentry = () => {\n    if (this.state.password != this.state.passwordReentry) {\n      this.setState({validPasswordReentry: false});\n    } else {\n      this.setState({validPasswordReentry: true});\n    }\n  }\n\n  checkPasswordInput = () => {\n    // regex to check if password has number\n    const hasNumberRegex = /\\d/;  \n    if (this.state.password.length >= 8 && hasNumberRegex.test(this.state.password)) {\n      this.setState({validPassword: true, validPasswordUI: true})\n    } else {\n      this.setState({validPassword: false, validPasswordUI: false})\n    }\n  }\n\n  checkValidInput = () => {\n    if (this.state.validPassword && this.state.validPasswordReentry) {\n      this.setState({validInput: true});\n    } else {\n      this.setState({validInput: false});\n    }\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        {this.state.confirmationCodeSent ? (\n          <>\n          <Text style ={styles.descriptionText}>Confirmation Code</Text>\n          <FormInputHandler\n            defaultText='Enter the code sent to your email here.'\n            defaultTextColor='#8B8B8B'\n            style={styles.userInfoText}\n            onChangeText={(val)=>this.setState({code: val})}\n            keyboardType='email-address'\n          />\n          <Text style ={{...styles.descriptionText, color: this.state.validPasswordUI ? 'white' : 'red'}}>New Password {this.state.validPasswordUI ? '' : ' - Must be 8 characters and contain a number!'}</Text>\n          <FormInputHandler\n            defaultText='Enter your new password here.'\n            defaultTextColor='#8B8B8B'\n            style={styles.userInfoText}\n            onChangeText={(val)=>this.setState({password: val, validInput: false})}\n            keyboardType='email-address'\n            onBlur={() => {\n              this.checkPasswordInput();\n              this.checkPasswordReentry();\n              this.checkValidInput();\n            }}\n            onEndEditing={() => {\n              this.checkPasswordInput();\n              this.checkPasswordReentry();\n              this.checkValidInput();\n            }}\n            secureTextEntry\n          />\n          <Text style ={{...styles.descriptionText, color: this.state.validPasswordReentry ? 'white' : 'red'}}>Re-enter new password {this.state.validPasswordReentry ? '' : ' - Passwords do not match!'}</Text>\n          <FormInputHandler\n            defaultText='Re-enter your new password here.'\n            defaultTextColor='#8B8B8B'\n            style={styles.userInfoText}\n            onChangeText={(val)=>this.setState({passwordReentry: val, validInput: false})}\n            keyboardType='email-address'\n            onBlur={() => {\n              this.checkPasswordReentry();\n              this.checkValidInput();\n            }}\n            onEndEditing={() => {\n              this.checkPasswordReentry();\n              this.checkValidInput();\n            }}\n            secureTextEntry\n          />\n          <LongButton\n            title=\"Confirm New Password\"\n            onPress={()=>{\n              if (!this.state.validInput) {\n                Alert.alert('Password Inputs are invalid!')\n              } else {\n                console.log('Confirming...');\n                this.context.confirmResetPassword(this.state.email, this.state.code, this.state.password)\n                .then(() => {\n                  console.log('successful password reset');\n                  this.props.navigation.pop();\n                })\n                .catch((err) => console.log('error on confirmation step: ', err))\n              }\n            }}\n          />\n          </>\n        ) : (\n          <>\n          <Text style ={styles.descriptionText}>Password Recovery</Text>\n          <FormInputHandler\n            defaultText='Enter the email attached to your account here.'\n            defaultTextColor='#8B8B8B'\n            style={styles.userInfoText}\n            onChangeText={(val)=>this.setState({email: val})}\n            keyboardType='email-address'\n          />\n          <LongButton\n            title=\"Reset Password\"\n            onPress={()=>{\n              this.context.resetPassword(this.state.email)\n              .then(() => {\n                console.log('code sent');\n                this.setState({confirmationCodeSent: true})\n              })\n              .catch((err) => console.log('error: ', err));\n            }}\n          />\n          </>\n        )} \n      </View>\n    );\n  }\n}\n\n\n\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 25,\n    backgroundColor: '#261136',\n  },\n  userInfoText: {\n    borderColor: '#4826A0',\n    borderWidth: 1,\n    textAlign: 'center',\n    color: 'white',\n    margin: 15,\n    padding: 15,\n  },\n  descriptionText:{\n    marginBottom: -10,\n    paddingLeft: 15,\n    color: 'white',\n  }\n});"]},"metadata":{},"sourceType":"module"}