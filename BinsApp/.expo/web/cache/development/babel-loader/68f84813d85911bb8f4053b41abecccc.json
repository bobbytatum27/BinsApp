{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/bobbytatum/Desktop/BinsApp/BinsApp/node_modules/react-native-credit-card-input/src/CreditCardInput.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactNative from \"react-native-web/dist/index\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport CreditCard from \"./CardView\";\nimport CCInput from \"./CCInput\";\nimport { InjectedProps } from \"./connectToState\";\nvar s = StyleSheet.create({\n  container: {\n    alignItems: \"center\"\n  },\n  form: {\n    marginTop: 20\n  },\n  inputContainer: {\n    marginLeft: 20\n  },\n  inputLabel: {\n    fontWeight: \"bold\"\n  },\n  input: {\n    height: 40\n  }\n});\nvar CVC_INPUT_WIDTH = 70;\nvar EXPIRY_INPUT_WIDTH = CVC_INPUT_WIDTH;\nvar CARD_NUMBER_INPUT_WIDTH_OFFSET = 40;\nvar CARD_NUMBER_INPUT_WIDTH = Dimensions.get(\"window\").width - EXPIRY_INPUT_WIDTH - CARD_NUMBER_INPUT_WIDTH_OFFSET;\nvar NAME_INPUT_WIDTH = CARD_NUMBER_INPUT_WIDTH;\nvar PREVIOUS_FIELD_OFFSET = 40;\nvar POSTAL_CODE_INPUT_WIDTH = 120;\n\nvar CreditCardInput = function (_Component) {\n  _inherits(CreditCardInput, _Component);\n\n  var _super = _createSuper(CreditCardInput);\n\n  function CreditCardInput() {\n    var _this;\n\n    _classCallCheck(this, CreditCardInput);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.componentDidMount = function () {\n      return _this._focus(_this.props.focused);\n    };\n\n    _this.componentWillReceiveProps = function (newProps) {\n      if (_this.props.focused !== newProps.focused) _this._focus(newProps.focused);\n    };\n\n    _this._focus = function (field) {\n      if (!field) return;\n\n      var scrollResponder = _this.refs.Form.getScrollResponder();\n\n      var nodeHandle = ReactNative.findNodeHandle(_this.refs[field]);\n      NativeModules.UIManager.measureLayoutRelativeToParent(nodeHandle, function (e) {\n        throw e;\n      }, function (x) {\n        scrollResponder.scrollTo({\n          x: Math.max(x - PREVIOUS_FIELD_OFFSET, 0),\n          animated: true\n        });\n\n        _this.refs[field].focus();\n      });\n    };\n\n    _this._inputProps = function (field) {\n      var _this$props = _this.props,\n          inputStyle = _this$props.inputStyle,\n          labelStyle = _this$props.labelStyle,\n          validColor = _this$props.validColor,\n          invalidColor = _this$props.invalidColor,\n          placeholderColor = _this$props.placeholderColor,\n          placeholders = _this$props.placeholders,\n          labels = _this$props.labels,\n          values = _this$props.values,\n          status = _this$props.status,\n          onFocus = _this$props.onFocus,\n          onChange = _this$props.onChange,\n          onBecomeEmpty = _this$props.onBecomeEmpty,\n          onBecomeValid = _this$props.onBecomeValid,\n          additionalInputsProps = _this$props.additionalInputsProps;\n      return {\n        inputStyle: [s.input, inputStyle],\n        labelStyle: [s.inputLabel, labelStyle],\n        validColor: validColor,\n        invalidColor: invalidColor,\n        placeholderColor: placeholderColor,\n        ref: field,\n        field: field,\n        label: labels[field],\n        placeholder: placeholders[field],\n        value: values[field],\n        status: status[field],\n        onFocus: onFocus,\n        onChange: onChange,\n        onBecomeEmpty: onBecomeEmpty,\n        onBecomeValid: onBecomeValid,\n        additionalInputProps: additionalInputsProps[field]\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(CreditCardInput, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          cardImageFront = _this$props2.cardImageFront,\n          cardImageBack = _this$props2.cardImageBack,\n          inputContainerStyle = _this$props2.inputContainerStyle,\n          _this$props2$values = _this$props2.values,\n          number = _this$props2$values.number,\n          expiry = _this$props2$values.expiry,\n          cvc = _this$props2$values.cvc,\n          name = _this$props2$values.name,\n          type = _this$props2$values.type,\n          focused = _this$props2.focused,\n          allowScroll = _this$props2.allowScroll,\n          requiresName = _this$props2.requiresName,\n          requiresCVC = _this$props2.requiresCVC,\n          requiresPostalCode = _this$props2.requiresPostalCode,\n          cardScale = _this$props2.cardScale,\n          cardFontFamily = _this$props2.cardFontFamily,\n          cardBrandIcons = _this$props2.cardBrandIcons;\n      return React.createElement(View, {\n        style: s.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 7\n        }\n      }, React.createElement(CreditCard, {\n        focused: focused,\n        brand: type,\n        scale: cardScale,\n        fontFamily: cardFontFamily,\n        imageFront: cardImageFront,\n        imageBack: cardImageBack,\n        customIcons: cardBrandIcons,\n        name: requiresName ? name : \" \",\n        number: number,\n        expiry: expiry,\n        cvc: cvc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }\n      }), React.createElement(ScrollView, {\n        ref: \"Form\",\n        horizontal: true,\n        keyboardShouldPersistTaps: \"always\",\n        scrollEnabled: allowScroll,\n        showsHorizontalScrollIndicator: false,\n        style: s.form,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }\n      }, React.createElement(CCInput, _extends({}, this._inputProps(\"number\"), {\n        keyboardType: \"numeric\",\n        containerStyle: [s.inputContainer, inputContainerStyle, {\n          width: CARD_NUMBER_INPUT_WIDTH\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }\n      })), React.createElement(CCInput, _extends({}, this._inputProps(\"expiry\"), {\n        keyboardType: \"numeric\",\n        containerStyle: [s.inputContainer, inputContainerStyle, {\n          width: EXPIRY_INPUT_WIDTH\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }\n      })), requiresCVC && React.createElement(CCInput, _extends({}, this._inputProps(\"cvc\"), {\n        keyboardType: \"numeric\",\n        containerStyle: [s.inputContainer, inputContainerStyle, {\n          width: CVC_INPUT_WIDTH\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }\n      })), requiresName && React.createElement(CCInput, _extends({}, this._inputProps(\"name\"), {\n        containerStyle: [s.inputContainer, inputContainerStyle, {\n          width: NAME_INPUT_WIDTH\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }\n      })), requiresPostalCode && React.createElement(CCInput, _extends({}, this._inputProps(\"postalCode\"), {\n        keyboardType: \"numeric\",\n        containerStyle: [s.inputContainer, inputContainerStyle, {\n          width: POSTAL_CODE_INPUT_WIDTH\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }]);\n\n  return CreditCardInput;\n}(Component);\n\nCreditCardInput.propTypes = _objectSpread(_objectSpread({}, InjectedProps), {}, {\n  labels: PropTypes.object,\n  placeholders: PropTypes.object,\n  labelStyle: Text.propTypes.style,\n  inputStyle: Text.propTypes.style,\n  inputContainerStyle: ViewPropTypes.style,\n  validColor: PropTypes.string,\n  invalidColor: PropTypes.string,\n  placeholderColor: PropTypes.string,\n  cardImageFront: PropTypes.number,\n  cardImageBack: PropTypes.number,\n  cardScale: PropTypes.number,\n  cardFontFamily: PropTypes.string,\n  cardBrandIcons: PropTypes.object,\n  allowScroll: PropTypes.bool,\n  additionalInputsProps: PropTypes.objectOf(PropTypes.shape(TextInput.propTypes))\n});\nCreditCardInput.defaultProps = {\n  cardViewSize: {},\n  labels: {\n    name: \"CARDHOLDER'S NAME\",\n    number: \"CARD NUMBER\",\n    expiry: \"EXPIRY\",\n    cvc: \"CVC/CCV\",\n    postalCode: \"POSTAL CODE\"\n  },\n  placeholders: {\n    name: \"Full Name\",\n    number: \"1234 5678 1234 5678\",\n    expiry: \"MM/YY\",\n    cvc: \"CVC\",\n    postalCode: \"34567\"\n  },\n  inputContainerStyle: {\n    borderBottomWidth: 1,\n    borderBottomColor: \"black\"\n  },\n  validColor: \"\",\n  invalidColor: \"red\",\n  placeholderColor: \"gray\",\n  allowScroll: false,\n  additionalInputsProps: {}\n};\nexport { CreditCardInput as default };","map":{"version":3,"sources":["/Users/bobbytatum/Desktop/BinsApp/BinsApp/node_modules/react-native-credit-card-input/src/CreditCardInput.js"],"names":["React","Component","PropTypes","ReactNative","CreditCard","CCInput","InjectedProps","s","StyleSheet","create","container","alignItems","form","marginTop","inputContainer","marginLeft","inputLabel","fontWeight","input","height","CVC_INPUT_WIDTH","EXPIRY_INPUT_WIDTH","CARD_NUMBER_INPUT_WIDTH_OFFSET","CARD_NUMBER_INPUT_WIDTH","Dimensions","get","width","NAME_INPUT_WIDTH","PREVIOUS_FIELD_OFFSET","POSTAL_CODE_INPUT_WIDTH","CreditCardInput","componentDidMount","_focus","props","focused","componentWillReceiveProps","newProps","field","scrollResponder","refs","Form","getScrollResponder","nodeHandle","findNodeHandle","NativeModules","UIManager","measureLayoutRelativeToParent","e","x","scrollTo","Math","max","animated","focus","_inputProps","inputStyle","labelStyle","validColor","invalidColor","placeholderColor","placeholders","labels","values","status","onFocus","onChange","onBecomeEmpty","onBecomeValid","additionalInputsProps","ref","label","placeholder","value","additionalInputProps","cardImageFront","cardImageBack","inputContainerStyle","number","expiry","cvc","name","type","allowScroll","requiresName","requiresCVC","requiresPostalCode","cardScale","cardFontFamily","cardBrandIcons","propTypes","object","Text","style","ViewPropTypes","string","bool","objectOf","shape","TextInput","defaultProps","cardViewSize","postalCode","borderBottomWidth","borderBottomColor"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactNative, {\n  NativeModules,\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  Dimensions,\n  TextInput,\n  ViewPropTypes,\n} from \"react-native\";\n\nimport CreditCard from \"./CardView\";\nimport CCInput from \"./CCInput\";\nimport { InjectedProps } from \"./connectToState\";\n\nconst s = StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n  },\n  form: {\n    marginTop: 20,\n  },\n  inputContainer: {\n    marginLeft: 20,\n  },\n  inputLabel: {\n    fontWeight: \"bold\",\n  },\n  input: {\n    height: 40,\n  },\n});\n\nconst CVC_INPUT_WIDTH = 70;\nconst EXPIRY_INPUT_WIDTH = CVC_INPUT_WIDTH;\nconst CARD_NUMBER_INPUT_WIDTH_OFFSET = 40;\nconst CARD_NUMBER_INPUT_WIDTH = Dimensions.get(\"window\").width - EXPIRY_INPUT_WIDTH - CARD_NUMBER_INPUT_WIDTH_OFFSET;\nconst NAME_INPUT_WIDTH = CARD_NUMBER_INPUT_WIDTH;\nconst PREVIOUS_FIELD_OFFSET = 40;\nconst POSTAL_CODE_INPUT_WIDTH = 120;\n\n/* eslint react/prop-types: 0 */ // https://github.com/yannickcr/eslint-plugin-react/issues/106\nexport default class CreditCardInput extends Component {\n  static propTypes = {\n    ...InjectedProps,\n    labels: PropTypes.object,\n    placeholders: PropTypes.object,\n\n    labelStyle: Text.propTypes.style,\n    inputStyle: Text.propTypes.style,\n    inputContainerStyle: ViewPropTypes.style,\n\n    validColor: PropTypes.string,\n    invalidColor: PropTypes.string,\n    placeholderColor: PropTypes.string,\n\n    cardImageFront: PropTypes.number,\n    cardImageBack: PropTypes.number,\n    cardScale: PropTypes.number,\n    cardFontFamily: PropTypes.string,\n    cardBrandIcons: PropTypes.object,\n\n    allowScroll: PropTypes.bool,\n\n    additionalInputsProps: PropTypes.objectOf(PropTypes.shape(TextInput.propTypes)),\n  };\n\n  static defaultProps = {\n    cardViewSize: {},\n    labels: {\n      name: \"CARDHOLDER'S NAME\",\n      number: \"CARD NUMBER\",\n      expiry: \"EXPIRY\",\n      cvc: \"CVC/CCV\",\n      postalCode: \"POSTAL CODE\",\n    },\n    placeholders: {\n      name: \"Full Name\",\n      number: \"1234 5678 1234 5678\",\n      expiry: \"MM/YY\",\n      cvc: \"CVC\",\n      postalCode: \"34567\",\n    },\n    inputContainerStyle: {\n      borderBottomWidth: 1,\n      borderBottomColor: \"black\",\n    },\n    validColor: \"\",\n    invalidColor: \"red\",\n    placeholderColor: \"gray\",\n    allowScroll: false,\n    additionalInputsProps: {},\n  };\n\n  componentDidMount = () => this._focus(this.props.focused);\n\n  componentWillReceiveProps = newProps => {\n    if (this.props.focused !== newProps.focused) this._focus(newProps.focused);\n  };\n\n  _focus = field => {\n    if (!field) return;\n\n    const scrollResponder = this.refs.Form.getScrollResponder();\n    const nodeHandle = ReactNative.findNodeHandle(this.refs[field]);\n\n    NativeModules.UIManager.measureLayoutRelativeToParent(nodeHandle,\n      e => { throw e; },\n      x => {\n        scrollResponder.scrollTo({ x: Math.max(x - PREVIOUS_FIELD_OFFSET, 0), animated: true });\n        this.refs[field].focus();\n      });\n  }\n\n  _inputProps = field => {\n    const {\n      inputStyle, labelStyle, validColor, invalidColor, placeholderColor,\n      placeholders, labels, values, status,\n      onFocus, onChange, onBecomeEmpty, onBecomeValid,\n      additionalInputsProps,\n    } = this.props;\n\n    return {\n      inputStyle: [s.input, inputStyle],\n      labelStyle: [s.inputLabel, labelStyle],\n      validColor, invalidColor, placeholderColor,\n      ref: field, field,\n\n      label: labels[field],\n      placeholder: placeholders[field],\n      value: values[field],\n      status: status[field],\n\n      onFocus, onChange, onBecomeEmpty, onBecomeValid,\n\n      additionalInputProps: additionalInputsProps[field],\n    };\n  };\n\n  render() {\n    const {\n      cardImageFront, cardImageBack, inputContainerStyle,\n      values: { number, expiry, cvc, name, type }, focused,\n      allowScroll, requiresName, requiresCVC, requiresPostalCode,\n      cardScale, cardFontFamily, cardBrandIcons,\n    } = this.props;\n\n    return (\n      <View style={s.container}>\n        <CreditCard focused={focused}\n          brand={type}\n          scale={cardScale}\n          fontFamily={cardFontFamily}\n          imageFront={cardImageFront}\n          imageBack={cardImageBack}\n          customIcons={cardBrandIcons}\n          name={requiresName ? name : \" \"}\n          number={number}\n          expiry={expiry}\n          cvc={cvc} />\n        <ScrollView ref=\"Form\"\n          horizontal\n          keyboardShouldPersistTaps=\"always\"\n          scrollEnabled={allowScroll}\n          showsHorizontalScrollIndicator={false}\n          style={s.form}>\n          <CCInput {...this._inputProps(\"number\")}\n            keyboardType=\"numeric\"\n            containerStyle={[s.inputContainer, inputContainerStyle, { width: CARD_NUMBER_INPUT_WIDTH }]} />\n          <CCInput {...this._inputProps(\"expiry\")}\n            keyboardType=\"numeric\"\n            containerStyle={[s.inputContainer, inputContainerStyle, { width: EXPIRY_INPUT_WIDTH }]} />\n          { requiresCVC &&\n            <CCInput {...this._inputProps(\"cvc\")}\n              keyboardType=\"numeric\"\n              containerStyle={[s.inputContainer, inputContainerStyle, { width: CVC_INPUT_WIDTH }]} /> }\n          { requiresName &&\n            <CCInput {...this._inputProps(\"name\")}\n              containerStyle={[s.inputContainer, inputContainerStyle, { width: NAME_INPUT_WIDTH }]} /> }\n          { requiresPostalCode &&\n            <CCInput {...this._inputProps(\"postalCode\")}\n              keyboardType=\"numeric\"\n              containerStyle={[s.inputContainer, inputContainerStyle, { width: POSTAL_CODE_INPUT_WIDTH }]} /> }\n        </ScrollView>\n      </View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}